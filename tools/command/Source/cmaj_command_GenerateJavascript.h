//
//     ,ad888ba,                              88
//    d8"'    "8b
//   d8            88,dba,,adba,   ,aPP8A.A8  88     The Cmajor Toolkit
//   Y8,           88    88    88  88     88  88
//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd
//     '"Y888Y"'   88    88    88  '"8bbP"Y8  88     https://cmajor.dev
//                                           ,88
//                                        888P"
//
//  The Cmajor project is subject to commercial or open-source licensing.
//  You may use it under the terms of the GPLv3 (see www.gnu.org/licenses), or
//  visit https://cmajor.dev to learn about our commercial licence options.
//
//  CMAJOR IS PROVIDED "AS IS" WITHOUT ANY WARRANTY, AND ALL WARRANTIES, WHETHER
//  EXPRESSED OR IMPLIED, INCLUDING MERCHANTABILITY AND FITNESS FOR PURPOSE, ARE
//  DISCLAIMED.

#pragma once

namespace generate_javascript
{

inline std::string generateJavascriptWorklet (cmaj::Patch& patch, const cmaj::Patch::LoadParams& loadParams, bool useBinaryen)
{
    static constexpr const auto generatedModuleSourceText = R"(
//==============================================================================
//
//  This file contains a Javascript/Webassembly/WebAudio export of the Cmajor
//  patch 'PATCH_FILE'.
//
//  This file was auto-generated by the Cmajor toolkit.
//
//  To use it, import this module into your HTML/Javascript code and call
//  `createAudioWorkletNodePatchConnection()` and
//  `connectPatchToDefaultAudioAndMIDI()` to create an instance of the
//  patch and to connect it to the web audio and MIDI devices.
//
//  For more details about Cmajor, visit https://cmajor.dev
//
//==============================================================================

import * as helpers from "/cmaj_api/cmaj_audio_worklet_helper.js"


//==============================================================================
/** This exports the patch's manifest, in case a caller needs to find out about its properties.
 */
export const manifest =
MANIFEST_JSON;

/** Returns the patch's output endpoint list */
export function getOutputEndpoints() { return MAIN_CLASS_NAME.prototype.getOutputEndpoints(); }

/** Returns the patch's input endpoint list */
export function getInputEndpoints()  { return MAIN_CLASS_NAME.prototype.getInputEndpoints(); }

//==============================================================================
/**  Creates an audio worklet node for the patch with the given name, attaches it
 *   to the audio context provided, and returns an object containing the node
 *   and a PatchConnection class to control it.
 *
 *   @param {AudioContext} audioContext - a web audio AudioContext object
 *   @param {string} workletName - the name to give the new worklet that is created
 *   @returns {Object} an object containing the new AudioWorkletNode and PatchConnection
 */
export async function createAudioWorkletNodePatchConnection (audioContext, workletName)
{
  const node = await helpers.createAudioWorkletNode (MAIN_CLASS_NAME, audioContext, workletName, Date.now() & 0x7fffffff);
  const connection = new helpers.AudioWorkletPatchConnection (node, manifest);

  if (manifest.worker?.length > 0)
  {
    connection.readResource = async (path) =>
    {
      return fetch (path);
    };

    connection.readResourceAsAudioData = async (path) =>
    {
      const response = await connection.readResource (path);
      const buffer = await audioContext.decodeAudioData (await response.arrayBuffer());

      let frames = [];

      for (let i = 0; i < buffer.length; ++i)
        frames.push ([]);

      for (let chan = 0; chan < buffer.numberOfChannels; ++chan)
      {
        const src = buffer.getChannelData (chan);

        for (let i = 0; i < buffer.length; ++i)
          frames[i].push (src[i]);
      }

      return {
        frames,
        sampleRate: buffer.sampleRate
      }
    };

    import (connection.getResourceAddress (manifest.worker)).then (module =>
    {
      module.default (connection);
    });
  }

  return { node, connection };
}

//==============================================================================
/**  Takes an audio node and connection that were returned by `createAudioWorkletNodePatchConnection()`
 *   and attempts to hook them up to the default audio and MIDI channels.
 *
 *   @param {AudioWorkletNode} node - the audio node
 *   @param {PatchConnection} connection - the PatchConnection object created by `createAudioWorkletNodePatchConnection()`
 *   @param {AudioContext} audioContext - a web audio AudioContext object
 */
export async function connectPatchToDefaultAudioAndMIDI (node, connection, audioContext)
{
  helpers.connectDefaultAudioAndMIDI ({ node, connection, audioContext, patchInputList: getInputEndpoints() });
}

CMAJOR_WRAPPER_CLASS

)";

    auto wrapper = generateCodeAndCheckResult (patch, loadParams, useBinaryen ? "javascript-binaryen" : "javascript", {});
    auto manifest = choc::text::trim (choc::json::toString (loadParams.manifest.manifest, true));

    return choc::text::trim (choc::text::replace (generatedModuleSourceText,
                                                  "PATCH_FILE", loadParams.manifest.manifestFile,
                                                  "CMAJOR_WRAPPER_CLASS", wrapper.generatedCode,
                                                  "MAIN_CLASS_NAME", wrapper.mainClassName,
                                                  "MANIFEST_JSON", manifest)) + "\n";
}

//==============================================================================
inline GeneratedFiles generateWebAudioHTML (cmaj::Patch& patch, const cmaj::Patch::LoadParams& loadParams, bool useBinaryen)
{
    GeneratedFiles generatedFiles;

    auto& manifest = loadParams.manifest;
    auto patchModuleFile = choc::javascript::makeSafeIdentifier (loadParams.manifest.name) + ".js";

    auto readme = choc::text::trimStart (choc::text::replace (R"(
### Auto-generated HTML & Javascript for Cmajor Patch "PATCH_NAME"

This folder contains some self-contained HTML/Javascript files that play and show a Cmajor
patch using WebAssembly and WebAudio.

For `index.html` to display correctly, this folder needs to be served as HTTP, so if you're
running it locally, you'll need to start a webserver that serves this folder, and then
point your browser at whatever URL your webserver provides. For example, you could run
`python3 -m http.server` in this folder, and then browse to the address it chooses.

The files have all been generated using the Cmajor command-line tool:
```
cmaj generate --target=webaudio --output=<location of this folder> <path to the .cmajorpatch file to convert>
```

- `index.html` is a minimal page that creates the javascript object that implements the patch,
   connects it to the default audio and MIDI devices, and displays its view.
- `CMAJOR_PATCH_JS` - this is the Javascript wrapper class for the patch, encapsulating its
   DSP as webassembly, and providing an API that is used to both render the audio and
   control its properties.
- `cmaj_api` - this folder contains javascript helper modules and resources.

To learn more about Cmajor, visit [cmajor.dev](cmajor.dev)
)",
                    "PATCH_NAME", manifest.name,
                    "CMAJOR_PATCH_JS", patchModuleFile));

    auto html = choc::text::trimStart (choc::text::replace (R"html(
<!DOCTYPE html><html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Cmajor Patch</title>
</head>

<body>
  <div id="cmaj-outer-container">
    <div id="cmaj-inner-container">
      <button id="cmaj-start-button">Click to Start</button>
    </div>
  </div>
</body>

<style>
    * { box-sizing: border-box; padding: 0; margin: 0; border: 0; }
    html { background: black; overflow: hidden; }
    body { padding: 0.5rem; display: block; position: absolute; width: 100%; height: 100%; }
    #cmaj-outer-container { display: block; position: relative; width: 100%; height: 100%; overflow: auto; }
    #cmaj-inner-container { display: block; position: relative; width: 100%; height: 100%; overflow: visible; transform-origin: 0% 0%; }
    #cmaj-start-button { border: none; background-color: transparent; color: white; width: 100%; height: 100%; }
</style>

<script type="module">

import * as patch from "./PATCH_MODULE_FILE"
import { createPatchView, scalePatchViewToFit } from "/cmaj_api/cmaj-patch-view.js"

//==============================================================================
document.getElementById ("cmaj-start-button").onclick = async function()
{
    const audioContext = new AudioContext();

    const { node, connection }
        = await patch.createAudioWorkletNodePatchConnection (audioContext, "cmaj-worklet-processor");

    await patch.connectPatchToDefaultAudioAndMIDI (node, connection, audioContext);

    const view = await createPatchView (connection);

    if (view)
    {
        const outer = document.getElementById ("cmaj-outer-container");
        const inner = document.getElementById ("cmaj-inner-container");

        inner.innerHTML = "";
        inner.appendChild (view);

        const resizeObserver = new ResizeObserver (() => scalePatchViewToFit (view, inner, outer));
        resizeObserver.observe (outer);

        scalePatchViewToFit (view, inner, outer);
    }
}

</script>
</html>
)html",
                    "PATCH_MODULE_FILE", patchModuleFile));

    // NB keep this file first in the list
    generatedFiles.addFile (patchModuleFile, generateJavascriptWorklet (patch, loadParams, useBinaryen));
    generatedFiles.addFile ("index.html", html);
    generatedFiles.addFile ("README.md", readme);

    for (auto& f : cmaj::EmbeddedWebAssets::files)
        generatedFiles.addFile ("cmaj_api/" + std::string (f.name), std::string (f.content));

    generatedFiles.addFile ("cmaj_api/cmaj_audio_worklet_helper.js", cmaj::EmbeddedAssets::getInstance().findContent ("cmaj_audio_worklet_helper.js"));

    auto workletHelperModuleSourceText = cmaj::EmbeddedAssets::getInstance().findContent ("cmaj_audio_worklet_helper.js");

    auto manifestFilePath = std::filesystem::path (manifest.manifestFile);
    auto manifestFilename = manifestFilePath.filename();
    auto fullPathToManifest = std::filesystem::path (manifest.getFullPathForFile (manifestFilename.string()));
    auto manifestFolder = fullPathToManifest.parent_path();

    for (auto& view : manifest.views)
    {
        auto viewFolder = std::filesystem::path (manifest.getFullPathForFile (view.getSource())).parent_path();
        generatedFiles.findAndAddFiles (viewFolder, manifestFolder);
    }

    for (auto& resource : manifest.resources)
        generatedFiles.findAndAddFiles (manifestFolder, manifestFolder, choc::text::WildcardPattern (resource, false));

    if (! loadParams.manifest.patchWorker.empty())
        generatedFiles.readAndAddFile (manifestFolder / GeneratedFiles::trimLeadingSlash (loadParams.manifest.patchWorker), manifestFolder);

    return generatedFiles;
}

}
