//
//     ,ad888ba,                              88
//    d8"'    "8b
//   d8            88,dba,,adba,   ,aPP8A.A8  88     The Cmajor Standard Library
//   Y8,           88    88    88  88     88  88
//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd
//     '"Y888Y"'   88    88    88  '"8bbP"Y8  88     https://cmajor.dev
//                                           ,88
//                                        888P"
//
//  The Cmajor standard library may be used under the terms of the ISC license:
//
//  Permission to use, copy, modify, and/or distribute this software for any purpose with or
//  without fee is hereby granted, provided that the above copyright notice and this permission
//  notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
//  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
//  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
//  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
//  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


//  This file contains non-public helper processors which are used by the
//  compiler to implement delays within graphs

/// @internal
namespace std::intrinsics::delay
{
    /// A delay that acts on a pair of input/output streams
    processor StreamDelay (using StreamType, int delayLength)
    {
        input stream StreamType in;
        output stream StreamType out;

        StreamType[delayLength] buffer;
        wrap<delayLength> pos;

        void main()
        {
            loop
            {
                out <- buffer[pos];
                advance();
                buffer[pos] = in;
                ++pos;
                advance();
            }
        }
    }

    /// A delay that acts on a pair of input/output values
    processor ValueDelay (using ValueType, int delayLength)
    {
        input value ValueType in;
        output value ValueType out;

        ValueType[delayLength] buffer;
        wrap<delayLength> pos;

        void main()
        {
            loop
            {
                out <- buffer[pos];
                advance();
                buffer[pos] = in;
                ++pos;
                advance();
            }
        }
    }

    /// A delay that acts on a pair of input/output event endpoints
    processor EventDelay (using EventType, int delayLength, int bufferSize)
    {
        input event EventType in;
        output event EventType out;

        event in (EventType e)
        {
            if (bufferEntries < bufferSize)
            {
                eventBuffer[writePos].e = e;
                eventBuffer[writePos].eventTime = currentTime + delayLength;
                ++writePos;
                ++bufferEntries;
            }
        }

        struct DelayedEvent
        {
            EventType e;
            int eventTime;
        }

        DelayedEvent[bufferSize] eventBuffer;
        wrap<bufferSize> readPos, writePos;
        int bufferEntries, currentTime;

        void emitEvents()
        {
            while (bufferEntries > 0 && eventBuffer[readPos].eventTime == currentTime)
            {
                out <- eventBuffer[readPos].e;
                ++readPos;
                --bufferEntries;
            }
        }

        void main()
        {
            loop
            {
                advance();
                emitEvents();
                ++currentTime;
                advance();
            }
        }
    }
}
