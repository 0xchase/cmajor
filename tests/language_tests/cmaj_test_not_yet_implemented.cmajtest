//
//     ,ad888ba,                              88
//    d8"'    "8b
//   d8            88,dba,,adba,   ,aPP8A.A8  88     (C)2024 Cmajor Software Ltd
//   Y8,           88    88    88  88     88  88
//    Y8a.   .a8P  88    88    88  88,   ,88  88     https://cmajor.dev
//     '"Y888Y"'   88    88    88  '"8bbP"Y8  88
//                                           ,88
//                                        888P"
//
//  This code may be used under either a GPLv3 or commercial
//  license: see LICENSE.md for more details.


## expectError ("4:2: error: Language feature not yet implemented: import statements!")

import "abcdefg";

## expectError ("4:2: error: Language feature not yet implemented: import statements!")

import a.b.c;

## expectError ("2:29: error: Language feature not yet implemented: import statements!")

namespace N { import "xyz"; }

## expectError ("2:9: error: Language feature not yet implemented: Fixed point support!")

void f (fixed v) {}

## expectError ("2:10: error: Language feature not yet implemented: Specialisation parameters for structures!")

struct S (int x) { int y; }

## expectError ("5:17: error: Language feature not yet implemented: slices of complex vectors!")

bool test()
{
    complex64<4> a = (1 + 4.i, 2 + 5.i, 6 + 8.i, 3 + 8.i);
    let slice = a[1:3];
    return (slice == complex64<2> (2 + 5.i, 6 + 8.i))[0];
}

## expectError ("10:14: error: Language feature not yet implemented: Exposing child endpoints which use processor arrays!")

processor P
{
    output stream float out;
    void main() { advance(); }
}

graph G [[ main ]]
{
    output p[0].out;
    node p = P[2];
}

## expectError ("5:25: error: Language feature not yet implemented: top-level arrays of inputs!")

processor P [[ main ]]
{
    output stream int out;
    input stream int in[3];
    void main() { let x = in[2]; loop advance(); }
}

## expectError ("4:27: error: Language feature not yet implemented: top-level arrays of outputs!")

processor P [[ main ]]
{
    output stream int out[4];
    input stream int in;
    void main() { out[1] <- 0; loop advance(); }
}

## expectError ("6:23: error: Language feature not yet implemented: Many-to-many connections are not currently supported!")

graph G [[ main ]]
{
    output stream int32 o1, o2;
    input stream int32 i1, i2;
    connection i1, i2 -> o2, o1;
}

## expectError ("5:23: error: Language feature not yet implemented: Dynamic slice indexes!")

void f (int i)
{
    var array = int[] (1, 2, 3, 4, 5);
    let b = array[1 : i];
}

## expectError ("5:19: error: Language feature not yet implemented: Dynamic slice indexes!")

void f (int i)
{
    var array = int[](1, 2, 3, 4, 5);
    let b = array[i:];
}


## expectError ("2:22: error: Language feature not yet implemented: Writing to the console from a free function!")

void foo() { console <- "bang"; }


## expectError ("10:1: error: Language feature not yet implemented: import statements!")

// Testing imports in merging namespaces
namespace a
{
}

namespace a
{
    import something;
}

## expectError ("4:5: error: Language feature not yet implemented: switch statements!")

void foo()
{
    switch (1)
    {}
}

## expectError ("error: Language feature not yet implemented: Slices of endpoints!")

graph Test [[ main ]]
{
    input stream float in;
    output stream float out;

    connection
    {
        in -> P.in;
        P.out -> out;
    }
}

graph P
{
    input stream float in[10];
    output stream float out[10];

    connection
    {
        in -> out[1:5];
    }
}

## expectError ("6:10: error: Language feature not yet implemented: Slices of graph nodes!")

graph P [[ main ]]
{
    input stream float in;

    node a = A[5];

    connection
    {
        in -> a[3:];
    }
}

processor A
{
    output stream float out;

    void main()
    {
        advance();
    }
}


## expectError ("6:10: error: Language feature not yet implemented: Slices of graph nodes!")

graph P [[ main ]]
{
    output stream float out;

    node a = A[5];

    connection
    {
        a[1:3] -> out;
    }
}

processor A
{
    output stream float out;

    void main()
    {
        advance();
    }
}


## expectError ("9:12: error: Language feature not yet implemented: Non-constant connection condition!")

graph Test [[ main ]]
{
    input stream float in1, in2, switchIn;
    output stream float out;

    connection
    {
        if (switchIn > 0)
            in1 -> out;
        else
            in2 -> out;
    }
}
