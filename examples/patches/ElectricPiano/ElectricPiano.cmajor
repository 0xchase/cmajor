//  //
//  //     ,ad888ba,                                88
//  //    d8"'    "8b
//  //   d8            88,dPba,,adPba,   ,adPPYba,  88      The Cmajor Language
//  //   88            88P'  "88"   "8a        '88  88
//  //   Y8,           88     88     88  ,adPPPP88  88      (c)2022 Sound Stacks Ltd
//  //    Y8a.   .a8P  88     88     88  88,   ,88  88      https://cmajor.dev
//  //     '"Y888Y"'   88     88     88  '"8bbP"Y8  88
//  //                                             ,88
//  //                                           888P"

/**
    An example of a simple additive synthesiser!
*/
graph AdditiveSynth  [[ main ]]
{
    input event std::midi::Message midiIn;
    output stream float audioOut;

    node
    {
        voices = Voice[8];
        voiceAllocator = std::voices::VoiceAllocator(8);
    }

    connection
    {
        midiIn -> std::midi::MPEConverter -> voiceAllocator;

        // Plumb the voice allocator to the voices array
        voiceAllocator.voiceEventOut -> voices.noteOn,
                                        voices.noteOff,
                                        voices.pitchBend;

        // Sum the voices audio out to the output
        voices -> audioOut;
    }
}

//==============================================================================
graph Voice
{
    input event
    {
        std::notes::NoteOn noteOn;
        std::notes::NoteOff noteOff;
        std::notes::PitchBend pitchBend;
    }

    output stream float audioOut;

    node
    {
        osc             = OscillatorBank (48);
        amplitudeSource = AmplitudeSource;
        declickEnvelope = std::envelopes::FixedASR (0.0f, 0.02f);
        attenuator      = std::levels::DynamicGain (float);
    }

    connection
    {
        noteOn          -> osc.noteOn, amplitudeSource.noteOn;
        pitchBend       -> osc.pitchBend;
        noteOn, noteOff -> declickEnvelope.eventIn;

        amplitudeSource.out         -> osc.amplitudes;
        osc.audioOut                -> attenuator.in;
        declickEnvelope.gainOut     -> attenuator.gain;
        attenuator                  -> audioOut;
    }
}

//==============================================================================
processor OscillatorBank (int size = 64)
{
    input event
    {
        std::notes::NoteOn noteOn;
        std::notes::PitchBend pitchBend;
    }

    input stream float<size> amplitudes;

    output stream float audioOut;

    event noteOn (std::notes::NoteOn e)
    {
        notePitch = e.pitch;
        bendSemitones = 0.0f;
        oscillators = 1.0f;
        setMultipliers();
    }

    event pitchBend (std::notes::PitchBend e)
    {
        bendSemitones = e.bendSemitones;
        setMultipliers();
    }

    float notePitch, bendSemitones;

    void setMultipliers()
    {
        let noteFrequency = std::notes::noteToFrequency (notePitch + bendSemitones);
        let nyquist = float (processor.frequency / 2.0);

        for (wrap<size> i)
        {
            let harmonicFrequency = noteFrequency * (int (i) + 1);

            if (harmonicFrequency < nyquist)
            {
                let angle = float32 (twoPi * harmonicFrequency * processor.period);
                multiplier[i].real = cos (angle);
                multiplier[i].imag = sin (angle);
            }
            else
            {
                multiplier[i] = 1.0f;
            }
        }
    }

    complex32<size> oscillators = 1.0f,
                    multiplier = 1.0f;

    void main()
    {
        loop
        {
            oscillators = oscillators * multiplier;

            if const (size == 1)
                audioOut <- oscillators.imag * amplitudes;
            else
                audioOut <- sum (oscillators.imag * amplitudes);

            advance();
        }
    }
}

//==============================================================================
processor AmplitudeSource
{
    input event std::notes::NoteOn noteOn;
    output stream float<size> out;

    external float<48>[] amplitudes;

    let size = 48;
    let stepRate = 1024;

    event noteOn (std::notes::NoteOn e)
    {
        value = amplitudes[0];
        increment = (amplitudes[1] - amplitudes[0]) / float<size> (stepRate);
        nextSlot = 1;
        steps = stepRate;
    }

    void next()
    {
        if (nextSlot < amplitudes.size - 1)
        {
            value = amplitudes.at (nextSlot);
            increment = (amplitudes.at (nextSlot + 1) - amplitudes.at (nextSlot)) / float<size> (stepRate);
            nextSlot++;
        }
        else
        {
            increment = 0;
        }

        steps = stepRate;
    }

    float<size> value, increment;
    int nextSlot, steps;

    void main()
    {
        loop
        {
            out <- value;
            value += increment;

            if (--steps == 0)
                next();

            advance();
        }
    }
}
