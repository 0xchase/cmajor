/* ------------------------------------------------------------
copyright: "(c)Romain Michon, CCRMA (Stanford University), GRAME"
license: "MIT"
name: "ClarinetMIDI"
Code generated with Faust 2.53.2 (https://faust.grame.fr)
Compilation options: -a /usr/local/share/faust/cmajor/minimal.cmajor -lang cmajor -cn clarinetMIDI -es 1 -mcd 16 -single -ftz 0
------------------------------------------------------------ */
/************************************************************************ 
 IMPORTANT NOTE : this file contains two clearly delimited sections :
 the ARCHITECTURE section (in two parts) and the USER section. Each section
 is governed by its own copyright and license. Please check individually
 each section for license and copyright information.
 *************************************************************************/

/******************* BEGIN minimal.cmajor ****************/

/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2019 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 
 ************************************************************************
 ************************************************************************/
 
//----------------------------------------------------------------------------
//  FAUST generated signal processor
//----------------------------------------------------------------------------

processor clarinetMIDI
{
	input event float32 eventfHslider8 [[ name: "freq", group: "/v:clarinet/h:midi/freq", min: 5e+01f, max: 1e+03f, init: 4.4e+02f, step: 0.01f, meta_style0: "knob" ]];
	input event float32 eventfHslider9 [[ name: "bend", group: "/v:clarinet/h:midi/bend", min: -2.0f, max: 2.0f, init: 0.0f, step: 0.01f, meta_hidden0: "1", meta_midi0: "pitchwheel", meta_style1: "knob" ]];
	input event float32 eventfHslider2 [[ name: "gain", group: "/v:clarinet/h:midi/gain", min: 0.0f, max: 1.0f, init: 0.6f, step: 0.01f, meta_style2: "knob" ]];
	input event float32 eventfHslider4 [[ name: "envAttack", group: "/v:clarinet/h:midi/envAttack", min: 0.0f, max: 3e+01f, init: 1.0f, step: 0.01f, meta_style3: "knob" ]];
	input event float32 eventfHslider3 [[ name: "sustain", group: "/v:clarinet/h:midi/sustain", min: 0.0f, max: 1.0f, init: 0.0f, step: 1.0f, meta_hidden1: "1", meta_midi1: "ctrl 64", meta_style4: "knob" ]];
	input event float32 eventfHslider7 [[ name: "reedStiffness", group: "/v:clarinet/h:otherParams/reedStiffness", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_midi2: "ctrl 1", meta_style5: "knob" ]];
	input event float32 eventfHslider1 [[ name: "bellOpening", group: "/v:clarinet/h:otherParams/bellOpening", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_midi3: "ctrl 3", meta_style6: "knob" ]];
	input event float32 eventfHslider6 [[ name: "vibratoFreq", group: "/v:clarinet/h:otherParams/vibratoFreq", min: 1.0f, max: 1e+01f, init: 5.0f, step: 0.01f, meta_style7: "knob" ]];
	input event float32 eventfHslider5 [[ name: "vibratoGain", group: "/v:clarinet/h:otherParams/vibratoGain", min: 0.0f, max: 1.0f, init: 0.25f, step: 0.01f, meta_style8: "knob" ]];
	input event float32 eventfHslider0 [[ name: "outGain", group: "/v:clarinet/h:otherParams/outGain", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_style9: "knob" ]];
	input event float32 eventfButton0 [[ name: "gate", group: "/v:clarinet/gate", text: "off|on", boolean ]];
	output stream float32 output0;
	output stream float32 output1;
	float32 fHslider0;
	int32[2] iRec6;
	float32 fHslider1;
	float32[2] fRec12;
	float32 fHslider2;
	float32 fButton0;
	float32 fHslider3;
	float32[2] fVec0;
	float32 fHslider4;
	int32 fSampleRate;
	float32 fConst1;
	float32[2] fRec15;
	float32 fConst5;
	int32[2] iRec17;
	float32 fConst6;
	float32 fConst7;
	float32 fConst8;
	float32[3] fRec16;
	float32 fHslider5;
	float32 fHslider6;
	float32[2] fRec19;
	float32[2] fRec13;
	float32 fHslider7;
	int32 IOTA0;
	float32[2048] fRec14;
	float32 fConst9;
	float32 fConst10;
	float32 fHslider8;
	float32 fHslider9;
	float32[2] fRec20;
	float32[2] fVec2;
	float32[2] fRec11;
	float32[2048] fRec2;
	float32[2] fRec0;
	bool fUpdated;
	int32[2] iControl;
	float32[12] fControl;
	float32[65536] ftbl0clarinetMIDISIG0;
	
	// freq [init = 4.4e+02f, min = 5e+01f, max = 1e+03f, step = 0.01f] 
	event eventfHslider8 (float32 val) { fHslider8 = val; fUpdated = true; } 
	// bend [init = 0.0f, min = -2.0f, max = 2.0f, step = 0.01f] 
	event eventfHslider9 (float32 val) { fHslider9 = val; fUpdated = true; } 
	// gain [init = 0.6f, min = 0.0f, max = 1.0f, step = 0.01f] 
	event eventfHslider2 (float32 val) { fHslider2 = val; fUpdated = true; } 
	// envAttack [init = 1.0f, min = 0.0f, max = 3e+01f, step = 0.01f] 
	event eventfHslider4 (float32 val) { fHslider4 = val; fUpdated = true; } 
	// sustain [init = 0.0f, min = 0.0f, max = 1.0f, step = 1.0f] 
	event eventfHslider3 (float32 val) { fHslider3 = val; fUpdated = true; } 
	// reedStiffness [init = 0.5f, min = 0.0f, max = 1.0f, step = 0.01f] 
	event eventfHslider7 (float32 val) { fHslider7 = val; fUpdated = true; } 
	// bellOpening [init = 0.5f, min = 0.0f, max = 1.0f, step = 0.01f] 
	event eventfHslider1 (float32 val) { fHslider1 = val; fUpdated = true; } 
	// vibratoFreq [init = 5.0f, min = 1.0f, max = 1e+01f, step = 0.01f] 
	event eventfHslider6 (float32 val) { fHslider6 = val; fUpdated = true; } 
	// vibratoGain [init = 0.25f, min = 0.0f, max = 1.0f, step = 0.01f] 
	event eventfHslider5 (float32 val) { fHslider5 = val; fUpdated = true; } 
	// outGain [init = 0.5f, min = 0.0f, max = 1.0f, step = 0.01f] 
	event eventfHslider0 (float32 val) { fHslider0 = val; fUpdated = true; } 
	// gate 
	event eventfButton0 (float32 val) { fButton0 = val; fUpdated = true; } 
	
	struct clarinetMIDISIG0
	{
		int32[2] iVec1;
		int32[2] iRec18;
	}

	void instanceInitclarinetMIDISIG0 (clarinetMIDISIG0& this, int sample_rate)
	{
		for (int32 l6 = 0; l6 < 2; l6 = l6 + 1) {
			this.iVec1.at (l6) = 0;
		}
		for (int32 l7 = 0; l7 < 2; l7 = l7 + 1) {
			this.iRec18.at (l7) = 0;
		}
	}
	
	void fillclarinetMIDISIG0_65536 (clarinetMIDISIG0& this, int count, float32[65536]& table)
	{
		for (int32 i1 = 0; i1 < count; i1 = i1 + 1) {
			this.iVec1[0] = 1;
			this.iRec18[0] = (this.iVec1[1] + this.iRec18[1]) % 65536;
			table.at (i1) = sin (9.58738e-05f * float32 (this.iRec18[0]));
			this.iVec1[1] = this.iVec1[0];
			this.iRec18[1] = this.iRec18[0];
		}
	}
	clarinetMIDISIG0 newclarinetMIDISIG0() { clarinetMIDISIG0 obj; return obj; }
	void deleteclarinetMIDISIG0 (clarinetMIDISIG0& this) {}
	
	float32 copysign(float32 x, float32 y) { return abs(x) * ((y < 0.0f) ? -1.0f : 1.0f); }
	
	int getNumInputs() { return 0; }
	
	int getNumOuputs() { return 2; }
	
	void classInit (int sample_rate)
	{
		clarinetMIDISIG0 sig0 = newclarinetMIDISIG0();
		instanceInitclarinetMIDISIG0 (sig0, sample_rate);
		fillclarinetMIDISIG0_65536 (sig0, 65536, ftbl0clarinetMIDISIG0);
		deleteclarinetMIDISIG0 (sig0);
	}
	
	void instanceConstants (int sample_rate)
	{
		fSampleRate = sample_rate;
		float32 fConst0 = min (1.92e+05f, max (1.0f, float32 (fSampleRate)));
		fConst1 = 1.0f / fConst0;
		float32 fConst2 = tan (6283.1855f / fConst0);
		float32 fConst3 = 1.0f / fConst2;
		float32 fConst4 = (fConst3 + 1.4142135f) / fConst2 + 1.0f;
		fConst5 = 0.05f / fConst4;
		fConst6 = 1.0f / fConst4;
		fConst7 = (fConst3 + -1.4142135f) / fConst2 + 1.0f;
		fConst8 = 2.0f * (1.0f - 1.0f / pow (fConst2, 2.0f));
		fConst9 = 0.00882353f * fConst0;
		fConst10 = 0.0014705883f * fConst0;
	}
	
	void instanceResetUserInterface()
	{
		fUpdated = true;
		fHslider0 = 0.5f;
		fHslider1 = 0.5f;
		fHslider2 = 0.6f;
		fButton0 = 0.0f;
		fHslider3 = 0.0f;
		fHslider4 = 1.0f;
		fHslider5 = 0.25f;
		fHslider6 = 5.0f;
		fHslider7 = 0.5f;
		fHslider8 = 4.4e+02f;
		fHslider9 = 0.0f;
	}
	
	void instanceClear()
	{
		for (int32 l0 = 0; l0 < 2; l0 = l0 + 1) {
			iRec6.at (l0) = 0;
		}
		for (int32 l1 = 0; l1 < 2; l1 = l1 + 1) {
			fRec12.at (l1) = 0.0f;
		}
		for (int32 l2 = 0; l2 < 2; l2 = l2 + 1) {
			fVec0.at (l2) = 0.0f;
		}
		for (int32 l3 = 0; l3 < 2; l3 = l3 + 1) {
			fRec15.at (l3) = 0.0f;
		}
		for (int32 l4 = 0; l4 < 2; l4 = l4 + 1) {
			iRec17.at (l4) = 0;
		}
		for (int32 l5 = 0; l5 < 3; l5 = l5 + 1) {
			fRec16.at (l5) = 0.0f;
		}
		for (int32 l8 = 0; l8 < 2; l8 = l8 + 1) {
			fRec19.at (l8) = 0.0f;
		}
		for (int32 l9 = 0; l9 < 2; l9 = l9 + 1) {
			fRec13.at (l9) = 0.0f;
		}
		IOTA0 = 0;
		for (int32 l10 = 0; l10 < 2048; l10 = l10 + 1) {
			fRec14.at (l10) = 0.0f;
		}
		for (int32 l11 = 0; l11 < 2; l11 = l11 + 1) {
			fRec20.at (l11) = 0.0f;
		}
		for (int32 l12 = 0; l12 < 2; l12 = l12 + 1) {
			fVec2.at (l12) = 0.0f;
		}
		for (int32 l13 = 0; l13 < 2; l13 = l13 + 1) {
			fRec11.at (l13) = 0.0f;
		}
		for (int32 l14 = 0; l14 < 2048; l14 = l14 + 1) {
			fRec2.at (l14) = 0.0f;
		}
		for (int32 l15 = 0; l15 < 2; l15 = l15 + 1) {
			fRec0.at (l15) = 0.0f;
		}
	}
	
	void init()
	{
		let sample_rate = int(processor.frequency);
		// classInit is not called here since the tables are actually not shared between instances
		instanceInit (sample_rate);
	}
	
	void instanceInit (int sample_rate)
	{
		// classInit has to be called for each instance since the tables are actually not shared between instances
		classInit (sample_rate);
		instanceConstants (sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	void control()
	{
		fControl[0] = fHslider0;
		fControl[1] = fHslider1;
		fControl[2] = 1.0f - fControl[1];
		fControl[3] = min (1.0f, fButton0 + fHslider3);
		fControl[4] = 0.001f * fHslider4;
		iControl[0] = int32 (abs (fControl[4]) < 1.1920929e-07f);
		fControl[5] = (bool (iControl[0]) ? 0.0f : exp (0.0f - fConst1 / (bool (iControl[0]) ? 1.0f : fControl[4])));
		fControl[6] = fHslider2 * fControl[3] * (1.0f - fControl[5]);
		fControl[7] = 0.01f * fHslider5;
		fControl[8] = fConst1 * fHslider6;
		fControl[9] = 0.26f * fHslider7 + -0.44f;
		fControl[10] = 1.7e+02f / fHslider8;
		fControl[11] = pow (2.0f, 0.083333336f * fHslider9);
		iControl[1] = int32 (fControl[3] == 0.0f);
	}

	void main()
	{
		// DSP loop running forever...
		loop
		{
			if (fUpdated) { fUpdated = false; control(); }
			
			// Computes one sample
			iRec6[0] = 0;
			fRec12[0] = fControl[2] * fRec11[1] + fControl[1] * fRec12[1];
			float32 fRec10 = fRec12[0] + float32 (iRec6[1]);
			fVec0[0] = fControl[3];
			fRec15[0] = fControl[6] + fControl[5] * fRec15[1];
			iRec17[0] = 1103515245 * iRec17[1] + 12345;
			fRec16[0] = 4.656613e-10f * float32 (iRec17[0]) - fConst6 * (fConst7 * fRec16[2] + fConst8 * fRec16[1]);
			float32 fTemp0 = fRec15[0] * (fConst5 * (fRec16[2] + fRec16[0] + 2.0f * fRec16[1]) + 1.0f);
			fRec19[0] = fControl[8] + (fRec19[1] - floor (fControl[8] + fRec19[1]));
			float32 fTemp1 = ftbl0clarinetMIDISIG0.at (int32 (65536.0f * fRec19[0]));
			float32 fTemp2 = fControl[7] * fTemp1;
			fRec13[0] = fTemp0 + fRec0[1] + fTemp2;
			float32 fTemp3 = 0.0f - fRec13[1];
			fRec14.at (IOTA0 & 2047) = fTemp2 + fTemp0 + fTemp3 * max (-1.0f, min (1.0f, fControl[9] * fTemp3 + 0.7f));
			float32 fTemp4 = float32 (int32 (fControl[3] == fVec0[1]) | iControl[1]);
			fRec20[0] = fControl[11] * (1.0f - 0.999f * fTemp4) + 0.999f * fTemp4 * fRec20[1];
			float32 fTemp5 = fConst10 * (fControl[10] / (fRec20[0] * (fControl[7] * fRec15[0] * fTemp1 + 1.0f)) + -0.05f);
			float32 fTemp6 = fTemp5 + -1.499995f;
			int32 iTemp7 = int32 (fTemp6);
			int32 iTemp8 = int32 (min (fConst9, float32 (max (0, iTemp7)))) + 1;
			float32 fTemp9 = floor (fTemp6);
			float32 fTemp10 = fTemp5 + (-1.0f - fTemp9);
			float32 fTemp11 = 0.0f - fTemp10;
			float32 fTemp12 = fTemp5 + (-2.0f - fTemp9);
			float32 fTemp13 = 0.0f - 0.5f * fTemp12;
			float32 fTemp14 = fTemp5 + (-3.0f - fTemp9);
			float32 fTemp15 = 0.0f - 0.33333334f * fTemp14;
			float32 fTemp16 = fTemp5 + (-4.0f - fTemp9);
			float32 fTemp17 = 0.0f - 0.25f * fTemp16;
			float32 fTemp18 = fTemp5 - fTemp9;
			int32 iTemp19 = int32 (min (fConst9, float32 (max (0, iTemp7 + 1)))) + 1;
			float32 fTemp20 = 0.0f - fTemp12;
			float32 fTemp21 = 0.0f - 0.5f * fTemp14;
			float32 fTemp22 = 0.0f - 0.33333334f * fTemp16;
			int32 iTemp23 = int32 (min (fConst9, float32 (max (0, iTemp7 + 2)))) + 1;
			float32 fTemp24 = 0.0f - fTemp14;
			float32 fTemp25 = 0.0f - 0.5f * fTemp16;
			float32 fTemp26 = fTemp10 * fTemp12;
			int32 iTemp27 = int32 (min (fConst9, float32 (max (0, iTemp7 + 3)))) + 1;
			float32 fTemp28 = 0.0f - fTemp16;
			float32 fTemp29 = fTemp26 * fTemp14;
			int32 iTemp30 = int32 (min (fConst9, float32 (max (0, iTemp7 + 4)))) + 1;
			fVec2[0] = fRec14.at ((IOTA0 - iTemp8) & 2047) * fTemp11 * fTemp13 * fTemp15 * fTemp17 + fTemp18 * (fRec14.at ((IOTA0 - iTemp19) & 2047) * fTemp20 * fTemp21 * fTemp22 + 0.5f * fTemp10 * fRec14.at ((IOTA0 - iTemp23) & 2047) * fTemp24 * fTemp25 + 0.16666667f * fTemp26 * fRec14.at ((IOTA0 - iTemp27) & 2047) * fTemp28 + 0.041666668f * fTemp29 * fRec14.at ((IOTA0 - iTemp30) & 2047));
			fRec11[0] = fVec2[1];
			float32 fRec7 = fRec10;
			float32 fRec8 = fRec11[0];
			float32 fRec9 = fRec11[0];
			fRec2.at (IOTA0 & 2047) = fRec7;
			float32 fRec3 = fTemp11 * fTemp13 * fTemp15 * fTemp17 * fRec2.at ((IOTA0 - iTemp8) & 2047) + fTemp18 * (fTemp20 * fTemp21 * fTemp22 * fRec2.at ((IOTA0 - iTemp19) & 2047) + 0.5f * fTemp10 * fTemp24 * fTemp25 * fRec2.at ((IOTA0 - iTemp23) & 2047) + 0.16666667f * fTemp26 * fTemp28 * fRec2.at ((IOTA0 - iTemp27) & 2047) + 0.041666668f * fTemp29 * fRec2.at ((IOTA0 - iTemp30) & 2047));
			float32 fRec4 = fRec8;
			float32 fRec5 = fRec9;
			fRec0[0] = fRec3;
			float32 fRec1 = fRec5;
			float32 fTemp31 = fControl[0] * fRec1;
			output0 <- fTemp31;
			output1 <- fTemp31;
			iRec6[1] = iRec6[0];
			fRec12[1] = fRec12[0];
			fVec0[1] = fVec0[0];
			fRec15[1] = fRec15[0];
			iRec17[1] = iRec17[0];
			fRec16[2] = fRec16[1];
			fRec16[1] = fRec16[0];
			fRec19[1] = fRec19[0];
			fRec13[1] = fRec13[0];
			IOTA0 = IOTA0 + 1;
			fRec20[1] = fRec20[0];
			fVec2[1] = fVec2[0];
			fRec11[1] = fRec11[0];
			fRec0[1] = fRec0[0];
			
			// Moves all streams forward by one 'tick'
			advance();
		}
	}
}

// Nothing more for now

/******************** END minimal.cmajor ****************/
